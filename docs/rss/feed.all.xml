<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>MarcDufresne's DevOps Blog</title><link>https://m0rk.space/</link><description></description><lastBuildDate>Mon, 24 Sep 2018 22:00:00 -0400</lastBuildDate><item><title>Using Poetry with a Private Repository</title><link>https://m0rk.space/posts/2018/Sep/24/using-poetry-with-a-private-repository/</link><description>&lt;p&gt;In a &lt;a href="https://m0rk.space/posts/2018/Sep/14/intro-to-poetry/"&gt;previous article&lt;/a&gt; we went through the basic configuration and usage
steps for &lt;a href="https://poetry.eustace.io"&gt;Poetry&lt;/a&gt;. One thing that is often needed in professional setting is
access to password-protected private package indexes, luckily Poetry can do that, lets see how we can go about it.&lt;/p&gt;
&lt;p&gt;We will be reusing the Poetry …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">MarcDufresne</dc:creator><pubDate>Mon, 24 Sep 2018 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:m0rk.space,2018-09-24:/posts/2018/Sep/24/using-poetry-with-a-private-repository/</guid><category>python</category><category>poetry</category><category>packaging</category><category>private repositories</category></item><item><title>Intro to Poetry</title><link>https://m0rk.space/posts/2018/Sep/14/intro-to-poetry/</link><description>&lt;p&gt;&lt;a href="https://poetry.eustace.io"&gt;Poetry&lt;/a&gt; is a Python packaging and dependency management tool that works really well
and will bring you into the future of Python project management. The goal of this article is to show you what
Poetry can do, and how to do it.&lt;/p&gt;
&lt;p&gt;To install Poetry you can simply use &lt;code&gt;pip …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">MarcDufresne</dc:creator><pubDate>Fri, 14 Sep 2018 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:m0rk.space,2018-09-14:/posts/2018/Sep/14/intro-to-poetry/</guid><category>python</category><category>poetry</category><category>packaging</category><category>dependency management</category></item><item><title>Deploying on Kubernetes using CircleCI and Kubetpl</title><link>https://m0rk.space/posts/2018/Aug/21/deploying-on-kubernetes-using-circleci-and-kubetpl/</link><description>&lt;p&gt;In a &lt;a href="https://m0rk.space/posts/2018/Aug/20/templating-kubernetes-resource-files/"&gt;previous article&lt;/a&gt; we saw how to turn our Kubernetes
resource files into configurable templates using &lt;code&gt;kubetpl&lt;/code&gt;. This time we will be going a bit further
and integrating &lt;code&gt;kubetpl&lt;/code&gt; templates into a CircleCI configuration. This is a good way to deploy new versions
of your app automatically when new …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">MarcDufresne</dc:creator><pubDate>Tue, 21 Aug 2018 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:m0rk.space,2018-08-21:/posts/2018/Aug/21/deploying-on-kubernetes-using-circleci-and-kubetpl/</guid><category>kubernetes</category><category>circleci</category><category>kubetpl</category></item><item><title>Templating Kubernetes Resource Files</title><link>https://m0rk.space/posts/2018/Aug/20/templating-kubernetes-resource-files/</link><description>&lt;p&gt;When deploying web applications, or any other type of application, it is
often needed or at least very useful to have different versions (or stages)
of it deployed. Those usually are Dev, Staging, Production and so on. However,
it becomes quite a pain to manage different versions of each of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">MarcDufresne</dc:creator><pubDate>Mon, 20 Aug 2018 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:m0rk.space,2018-08-20:/posts/2018/Aug/20/templating-kubernetes-resource-files/</guid><category>kubernetes</category><category>kubetpl</category></item></channel></rss>